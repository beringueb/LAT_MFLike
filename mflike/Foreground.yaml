requested_cls: [ "tt", "te", "ee" ]
lmin: 2
lmax: 6001
# ells set automatically from above if not set directly
ells:
experiments: [ "LAT_93", "LAT_145", "LAT_225" ]
bandint_freqs: [ 93.0, 145.0, 225.0 ]

# path to data
data_folder: 

# Parameters to build a top-hat band:
# - nsteps sets the number of frequencies used in the band integration
# - bandwidth sets the relative width of the band wrt the central frequency
#   the central frequency of each band is set from the bands stored in the sacc file
#     - with nstep: 1, bandwidth must be 0
#     Dirac delta bandpass, no band integration
#     useful if you don't want to do band integration
#     when the bandpasses in the sacc file are multifrequency
#     the freq used is the effective frequency from the bandpass
#     - if nstep > 1,  bandwidth must be > 1
#     bandwidth can be a list if you want a different width for each band
#     e.g. bandwidth: [0.3,0.2,0.3] for 3 bands
# when top_hat_band is a null dict: no top-hat band is built and
# bandpasses read from sacc file. Band integration is performed accordingly
# (if bandpass in sacc is a single freq, no band integration)
# the default is to read bandpasses from file, to build top-hat uncomment the
# parameters of the block!
# Bandpass has to be divided by nu^2 if measured with respect to a RJ source
# the nu^2 factor is set back again in the _bandpass_construction function
top_hat_band:
#  nsteps: 1
#  bandwidth: 0


# specify if the beam profile has to be computed as a Gaussian beam
# or be read from a file (either from external file with name "rootname" or from sacc)
# - if Gaussian_beam = False/empty and beam_from_file = False/empty, it will be read from the sacc file (currently not working)
# - if Gaussian_beam = False/empty and beam_from_file is specified, it will be read from this file
#   the file has to be saved in the same path as the data
#   indicate only the name, without the yaml extension and the rest of the path
#   it has to be a yaml with keys = experiments and items = array((freqs, ells))
#   i.e. numpy arrays of beam profiles for each frequency in the passband of that array
# - If we want to compute Gaussian beams, fill the Gaussian_beam entry with dictionaries
#   containing the parametrization for FWHM for each experiment/array in T and pol
# - If bandpass shifts are != 0, you have to fill the Bandpass_shifted_beams key
#   with the name of the file containing the dictionary with beam profiles for different values
#   of Delta nu. As before, the file should be a yaml, the filename should not contain the ".yaml" 
#   extension and should be in the same path as the data. The dictionary should contain a key for
#   each experiment/array, and for each of these keys there should be a "nu_0", "alpha" and "beams"
#   keys. The "beams" item would be a dictionary {"nu_0 + Delta nu": b_ell, "nu_0 + 2Delta nu": b'_ell,...}   
# default is the beam_profile to be a null dict and chromatic beam not 
# taken into account
beam_profile:
# Gaussian has to be either empty or filled with params needed for each experiment 
#  Gaussian_beam: 
#    LAT_93_s0:
#      FWHM_0: ...
#      nu_0: ...
#      alpha: ...
#    LAT_93_s2:
#      FWHM_0: ...
#      nu_0: ...
#      alpha: ...
#    LAT_145_s0:
#      ...
#    ...
#  Bandpass_shifted_beams: "filename"/null
#  beam_from_file: "filename"/null


normalisation:
  nu_0: 150.0
  ell_0: 3000
  T_CMB: 2.725

components:
  tt:
    - kSZ
    - tSZ_and_CIB
    - cibp
    - dust
    - radio
  te:
    - radio
    - dust
  ee:
    - radio
    - dust

# parameters that are always used
params:
  beta_s: #beta radio
    value: -2.5
    latex: \beta_s
  alpha_s: #alpha radio
    value: 1.0
    latex: \alpha_s
  T_effd: #effective galactic dust temperature
    value: 19.6
    latex: T_{\mathrm{dust},\mathrm{eff}}
  beta_d: #beta galactic dust
    value: 1.5
    latex: \beta_\mathrm{dust}
